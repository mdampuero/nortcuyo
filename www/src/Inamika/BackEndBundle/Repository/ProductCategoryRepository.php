<?php

namespace Inamika\BackEndBundle\Repository;
use Inamika\BackEndBundle\Entity\Product;
/**
 * ProductCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductCategoryRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAll(){
        return $this->createQueryBuilder('e')
        ->select('e')
        ->where('e.isDelete = :isDelete')
        ->setParameter('isDelete',false)
        ->orderBy("e.name","ASC");
    }

    public function getTree($parentId=null){
        $em = $this->getEntityManager();
        $qb=$this->getAll();
        $result=array();
        if(!$parentId)
            $qb->andWhere('e.parent IS NULL');
        else
            $qb->andWhere('e.parent=:parent')->setParameter('parent',$parentId);
        $response=$qb->getQuery()->getResult();
        foreach ($response as $key => $res)
            $result[]=array(
                'id'=>$res->getId(),
                'text'=>$res->getName(),
                'items'=>$em->getRepository(Product::class)->getByCategoryTotal($res->getId()),
                'children'=>$this->getTree($res->getId()));
        return $result;
    }
    
    public function getParents($entity){
        $em = $this->getEntityManager();
        $qb=$this->getAll();
        $result=array();
       
        $qb->andWhere('e.id=:id')->setParameter('id',$entity->getParent());
        $response=$qb->getQuery()->getResult();
        foreach ($response as $key => $res)
            $result=array(
                'id'=>$res->getId(),
                'text'=>$res->getName(),
                'parent'=>$this->getParents($res));
        return $result;
    }

    public function search($query=null,$limit=0,$offset=0,$sort=null,$direction=null){
        if($limit>100) $limit=100;
        if($limit==0) $limit=30;
        $qb= $this->getAll()
        ->setFirstResult($offset)
        ->setMaxResults($limit)
        ->orderBy("e.id","DESC");
        if($sort){
            if(strpos($sort, ".") === false)
                $sort='e.'.$sort;
            $qb->orderBy($sort,$direction);
        }
        if($query)
            $qb->andWhere('e.name LIKE :query')->setParameter('query',"%".$query."%");
        return $qb;
    }

    public function searchTotal($query=null,$limit=0,$offset=0){
        $resultTotal=$this->search($query,$limit=0,$offset=0)
        ->setFirstResult(null)
        ->select('COUNT(e.id) as total')
        ->setMaxResults(1)
        ->getQuery()
        ->getOneOrNullResult();
        return (int)$resultTotal['total'];
    }
   
    public function total(){
        $resultTotal=$this->search()
        ->setFirstResult(null)
        ->where('e.isDelete = :isDelete')
        ->setParameter('isDelete',false)
        ->select('COUNT(e.id) as total')
        ->setMaxResults(1)
        ->getQuery()
        ->getOneOrNullResult();
        return (int)$resultTotal['total'];
    }
}
